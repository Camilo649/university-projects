use('mflix');
use('restaurantdb');

// 1. Especificar en la colección users las siguientes reglas de validación: El campo name (requerido) debe ser un string con un máximo de 30 caracteres, email (requerido) debe ser un string que matchee con la expresión regular: "^(.*)@(.*)\\.(.{2,4})$" , password (requerido) debe ser un string con al menos 50 caracteres.

db.runCommand({
    collMod: "users",
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["name", "email", "password"],
            properties: {
                name: {
                    bsonType: "string",
                    maxLength: 30,
                    description: "The name field must be a string of no more than 30 characters."
                },
                email: {
                    bsonType: "string",
                    pattern: "^(.*)@(.*)\\.(.{2,4})$",
                    description: "The email field must be a valid string."
                },
                password: {
                    bsonType: "string",
                    minLength: 50,
                    description: "The password field must be a string with at least 50 characters."  
                }
            }
        }
    },
    validationLevel: "strict",
    validationAction: "error"
});

// 2. Obtener metadata de la colección users que garantice que las reglas de validación fueron correctamente aplicadas. 

db.getCollectionInfos({"name": "users"});

// 3. Especificar en la colección theaters las siguientes reglas de validación: El campo theaterId (requerido) debe ser un int y location (requerido) debe ser un object con:
// a. un campo address (requerido) que sea un object con campos street1, city, state y zipcode todos de tipo string y requeridos
// b. un campo geo (no requerido) que sea un object con un campo type, con valores posibles “Point” o null y coordinates que debe ser una lista de 2 doubles
// Por último, estas reglas de validación no deben prohibir la inserción o actualización de documentos que no las cumplan sino que solamente deben advertir.

db.runCommand({
    collMod: "theaters",
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["theaterId", "location"],
            properties: {
                theaterId: {
                    bsonType: "int",
                    description: "The theaterId field must be a integer."
                },
                location: {
                    bsonType: "object",
                    required: ["address"],
                    properties: {
                        address: {
                            bsonType: "object",
                            required: ["street1", "city", "state", "zipcode"],
                            properties: {
                                street1: {
                                    bsonType: "string",
                                    description: "The street1 field must be a string."
                                },
                                city: {
                                    bsonType: "string",
                                    description: "The city field must be a string."
                                },
                                state: {
                                    bsonType: "string",
                                    description: "The state field must be a string."
                                },
                                zipcode: {
                                    bsonType: "string",
                                    description: "The zipcode field must be a string."
                                }
                            },
                            description: "The address field must be an array with the elements: street1, city, state and zipcode. All of string type."
                        },
                        geo: {
                            bsonType: "object",
                            properties: {
                                type: {
                                    bsonType: "string",
                                    enum: ["Point", null],
                                    description: "The type field can only be Point or null."
                                },
                                coordinates: {
                                    bsonType: "array",
                                    items: {
                                        bsonType: "double"
                                    },
                                    minItems: 2,
                                    maxItems: 2,
                                    description: "The coordinates field must be an array with two doubles."
                                }
                            },
                            description: "The geo field must contain a type and coordinates."
                        }
                    },
                    description: "The location field must contain an adress and (optionally) a geo."
                }
            }
        }
    },
    validationLevel: "moderate",
    validationAction: "warn"
});

// 4. Especificar en la colección movies las siguientes reglas de validación: El campo title (requerido) es de tipo string, year (requerido) int con mínimo en 1900 y máximo en 3000, y que tanto cast, directors, countries, como genres sean arrays de strings sin duplicados.
// a. Hint: Usar el constructor NumberInt() para especificar valores enteros a la hora de insertar documentos. Recordar que mongo shell es un intérprete javascript y en javascript los literales numéricos son de tipo Number (double).

db.runCommand({
    collMod: "movies",
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["title", "year"],
            properties: {
                title: {
                    bsonType: "string",
                    description: "The title field must be a string."
                },
                year: {
                    bsonType: "int",
                    minimum: 1900,
                    maximum: 3000,
                    description: "The year field must ve a integer between 1900-3000 inclusive."
                },
                cast: {
                    bsonType: "array",
                    items: {
                        bsonType: "string"
                    },
                    uniqueItems: true,
                    description: "The cast field must be an array of unique strings."
                },
                directors: {
                    bsonType: "array",
                    items: {
                        bsonType: "string"
                    },
                    uniqueItems: true,
                    description: "The directors field must be an array of unique strings."
                },
                countries: {
                    bsonType: "array",
                    items: {
                        bsonType: "string"
                    },
                    uniqueItems: true,
                    description: "The countries field must be an array of unique strings."
                },
                genres: {
                    bsonType: "array",
                    items: {
                        bsonType: "string"
                    },
                    uniqueItems: true,
                    description: "The genres field must be an array of unique strings."
                }
            }
        }
    },
    validationLevel: "strict",
    validationAction: "error"
});

// 5. Crear una colección userProfiles con las siguientes reglas de validación: Tenga un campo user_id (requerido) de tipo “objectId”, un campo language (requerido) con alguno de los siguientes valores [ “English”, “Spanish”, “Portuguese” ] y un campo favorite_genres (no requerido) que sea un array de strings sin duplicados.

db.createCollection("userProfiles", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["user_id", "language"],
            properties: {
                user_id: {
                    bsonType: "objectId",
                    description: "The user_id field must be a objectId"
                },
                language: {
                    bsonType: "string",
                    enum: ["English", "Spanish", "Portuguese"],
                    description: "The language field can only be English, Spanish or Portuguese."
                },
                favorite_genres: {
                    bsonType: "array",
                    items: {
                        bsonType: "string"
                    },
                    uniqueItems: true,
                    description: "The favorite_genres must be an array of unique strings."
                }
            }
        },
        validationLevel: "strict",
        validationAction: "error"
    }
});

// 6. Identificar los distintos tipos de relaciones (One-To-One, One-To-Many) en las colecciones movies y comments. Determinar si se usó documentos anidados o referencias en cada relación y justificar la razón.

/*
* RTA: La relación es del tipo One-To-Many (cada película tiene 0 o más comentarios). Se usaron referencias
* ya que el Id de la película se almacena en el campo "movie_id" de la colleción comments.
*/

// 7. 