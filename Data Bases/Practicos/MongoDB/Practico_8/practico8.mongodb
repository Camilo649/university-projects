use('mflix');
use('restaurantdb');

//1. Cantidad de cines (theaters) por estado.

db.theaters.aggregate([
    {
        $group:{
            _id: "$location.address.state",
            theatersCount:{
                $count:{}
            }
        }
    },
    {
        $project:{
            state:"$_id",
            theatersCount:1,
            _id:0
        }
    }
]).sort(
    {
        "state":1
    }
);

//2. Cantidad de estados con al menos dos cines (theaters) registrados.

db.theaters.aggregate([
    {
        $group: {
            _id: "$location.address.state",
            theatersCount:{
                $count:{}
            }
        }
    },
    {
        $match:{
            "theatersCount":{
                $gte:2
            }
        }
    },
    {
        $count: "statesCount"
    }
]);

//3. Cantidad de películas dirigidas por "Louis Lumière". Se puede responder sin pipeline de agregación, realizar ambas queries.

//CON PIPELINE
db.movies.aggregate([
    {
        $match:{
            "directors":{
                $in: ["Louis Lumière"]
            }
        }
    },
    {
        $count: "moviesCount"
    }
]);

//SIN PIPELINE
db.movies.find(
    {
        "directors":{
            $in: ["Louis Lumière"]
        }
    }
).count();

//4. Cantidad de películas estrenadas en los años 50 (desde 1950 hasta 1959). Se puede responder sin pipeline de agregación, realizar ambas queries.

//CON PIPELINE
db.movies.aggregate([
    {
        $match:{
            "year":{
                $gte: 1950, $lt: 1960
            }
        }
    },
    {
        $count: "moviesCount"
    }
]);

//SIN PIPLINE
db.movies.find(
    {
        "year":{
                $gte: 1950, $lt: 1960
            }
    }
).count(

);

//5. Listar los 10 géneros con mayor cantidad de películas (tener en cuenta que las películas pueden tener más de un género). Devolver el género y la cantidad de películas. Hint: unwind puede ser de utilidad

db.movies.aggregate([
    {
        $unwind:"$genres"
    },
    {
        $group:{
            _id: "$genres",
            moviesCount:{
                $count:{}
            }
        }
    },
    {
        $project:{
            genre:"$_id",
            moviesCount:1,
            _id:0
        }
    },
    {
        $sort:{
            moviesCount:-1
        }
    },
    {
        $limit:10
    }
]);

//6. Top 10 de usuarios con mayor cantidad de comentarios, mostrando Nombre, Email y Cantidad de Comentarios.

db.comments.aggregate([
    {
        $group: {
          _id: "$email",
          commentsCount:{
            $count:{}
          },
          name: { $first: "$name" }
        }
    },
    {
        $project: {
            name:1,
            email:"$_id",
            commentsCount:1,
            _id:0
        }
    },
    {
        $sort:{
            commentsCount:-1
        }
    },
    {
        $limit:10
    }
]);

//7. Ratings de IMDB promedio, mínimo y máximo por año de las películas estrenadas en los años 80 (desde 1980 hasta 1989), ordenados de mayor a menor por promedio del año.

db.movies.aggregate([
    {
        $match:{
            "year":{
                $gte: 1980, $lt: 1990
            },
            "imdb.rating":{
                $type:"number"
            }
        }
    },
    {
        $group: {
          _id: "$year",
          ratingAvg:{
            $avg:"$imdb.rating"
          },
          ratingMin:{
            $min:"$imdb.rating"
          },
          ratingMax:{
            $max:"$imdb.rating"
          }
        }
    },
    {
        $project:{
            year:"$_id",
            ratingAvg:1,
            ratingMin:1,
            ratingMax:1,
            _id:0
        }
    },
    {
        $sort:{
            ratingAvg:-1
        }
    }
]);

//8. Título, año y cantidad de comentarios de las 10 películas con más comentarios.

db.movies.aggregate([
    {
        $lookup:{
          from: "comments",
          localField: "_id",
          foreignField: "movie_id",
          as: "movie_comments"
        }
    },
    {
        $project:{
            title:1,
            year:1,
            commentsCount:{
                $size:"$movie_comments"
            }
        }
    },
    {
        $sort:{
            commentsCount:-1
        }
    },
    {
        $limit:10
    }
]);

//9. Crear una vista con los 5 géneros con mayor cantidad de comentarios, junto con la cantidad de comentarios.

db.createView(
    "top5Genres",
    "movies",
    [
        {
            $unwind:"$genres"
        },
        {
            $lookup:{
              from: "comments",
              localField: "_id",
              foreignField: "movie_id",
              as: "movie_comments"
            }
        },
        {
            $group:{
                _id: "$genres",
                commentsCount:{
                    $sum:{
                        $size:"$movie_comments"
                    }
                }
            }
        },
        {
            $project:{
                genre:"$_id",
                commentsCount:1,
                _id:0
            }
        },
        {
            $sort:{
                commentsCount:-1
            }
        },
        {
            $limit:5
        }
    ]
);

//10. Listar los actores (cast) que trabajaron en 2 o más películas dirigidas por "Jules Bass". Devolver el nombre de estos actores junto con la lista de películas (solo título y año) dirigidas por “Jules Bass” en las que trabajaron. 
//a. Hint1: addToSet
//b. Hint2: {'name.2': {$exists: true}} permite filtrar arrays con al menos 2 elementos, entender por qué.
//c. Hint3: Puede que tu solución no use Hint1 ni Hint2 e igualmente sea correcta

db.movies.aggregate([
    {
        $match:{
            "directors":{
                $in: ["Jules Bass"]
            }
        }
    },
    {
        $unwind: "$cast"
    },
    {
        $group:{
            _id:"$cast",
            movies:{
                $addToSet:{
                    title: "$title",
                    year: "$year"
                }
            }
        }
    },
    {
        $match:{
            "movies.1":{        // Los arreglos se indexan desde 0
                $exists:true
            } 
        }
    },
    {
        $project: {
            actor:"$_id",
            movies:1,
            _id:0
        }
    }
]);

//11. Listar los usuarios que realizaron comentarios durante el mismo mes de lanzamiento de la película comentada, mostrando Nombre, Email, fecha del comentario, título de la película, fecha de lanzamiento. HINT: usar $lookup con multiple condiciones 

db.comments.aggregate([
    {
        $lookup: {
          from: "movies",
          let:{movieId:"$movie_id", commentDate:"$date"},
          pipeline:[
            {
                $match: {
                    $expr: {
                        $and:[
                            {$eq:["$_id", "$$movieId"]},
                            {$eq:[{$year:"$released"}, {$year:"$$commentDate"}]},
                            {$eq:[{$month:"$released"}, {$month:"$$commentDate"}]}
                        ]
                    }
                }
            }
          ],
          as:"moviesMatched"
        }
    },
    {
        $match: {
          moviesMatched: { $ne: [] }
        }
    },
    // {
    //     $unwind:"$moviesMatched"  // No hace falta pues los arreglos siempre tienen longitud 1
    // },
     {
         $project: {
           name:1,
           email:1,
           date:1,
           "moviesMatched.title":1, // mongo me da una ayudita, pero lo ideal seria acceder al primer elemento con $first
           "moviesMatched.released":1, // idem
         }
     }
]);

//12. Listar el id y nombre de los restaurantes junto con su puntuación máxima, mínima y la suma total. Se puede asumir que el restaurant_id es único.
// a. Resolver con $group y accumulators.

db.restaurants.aggregate([
    {
        $unwind:"$grades"
    },
    {
        $group:{
          _id: "$restaurant_id",
          name: { $first: "$name" },
          MaxScore:{
            $max:"$grades.score"
          },
          MinScore:{
            $min:"$grades.score"
          },
          TotalScore:{
            $sum:"$grades.score"
          }
        }
    },
    {
        $project:{
            restaurant_id:"$_id",
            name:1,
            MaxScore:1,
            MinScore:1,
            TotalScore:1,
            _id:0
        }
    },
    {
        $sort:{
            name:1
        }
    }
]);

// b. Resolver con expresiones sobre arreglos (por ejemplo, $sum) pero sin $group.

db.restaurants.aggregate([
    {
        $project:{            
            restaurant_id:1,
            name:1,
            MaxScore:{$max:"$grades.score"},
            MinScore:{$min:"$grades.score"},
            TotalScore:{$sum: "$grades.score"},
            _id:0
        }
    },
    {
        $sort:{
            name:1
        }
    }
]);

// c. Resolver como en el punto b) pero usar $reduce para calcular la puntuación total.

db.restaurants.aggregate([
    {
        $project:{            
            restaurant_id:1,
            name:1,
            MaxScore:{$max:"$grades.score"},
            MinScore:{$min:"$grades.score"},
            TotalScore:{
                $reduce:{
                    input:"$grades",
                    initialValue:0,
                    in:{$add:["$$value", "$$this.score"]} //$$value: valor actual (comienza con 'initialValue'); $$this: elemento actual del arreglo
                }
            },
            _id:0
        }
    },
    {
        $sort:{
            name:1
        }
    }
]);

// d. Resolver con find.

db.restaurants.find(
    {},
    {
        restaurant_id:1,
        name:1,
        MaxScore:{$max:"$grades.score"},
        MinScore:{$min:"$grades.score"},
        TotalScore:{$sum: "$grades.score"},
    }
).sort(
    {
        name:1
    }
);

db.restaurants.find()

//13. Actualizar los datos de los restaurantes añadiendo dos campos nuevos. 
// a. "average_score": con la puntuación promedio
// b. "grade": con "A" si "average_score" está entre 0 y 13, 
//             con "B" si "average_score" está entre 14 y 27 
//             con "C" si "average_score" es mayor o igual a 28    
// Se debe actualizar con una sola query.
// a. HINT1. Se puede usar pipeline de agregación con la operación update
// b. HINT2. El operador $switch o $cond pueden ser de ayuda.

db.restaurants.updateMany(
    {},
    [
        {
            $set:{
                average_score:{
                    $divide:[
                        {
                            $reduce:{
                                input:"$grades",
                                initialValue:0,
                                in:{$add:["$$value", "$$this.score"]}
                            }
                        },
                        {
                            $cond: {
                                if:{$eq:[{$size:"$grades"},0]},
                                then:1,
                                else:{$size:"$grades"}
                            }
                        }
                    ]
                },
                
            }
        },
        {
            $set:{
                grade:{
                    $switch:{
                        branches:[
                            {
                                case:{
                                    $and:[{$gte:["$average_score", 0]}, {$lt:["$average_score", 14]}] 
                                }, 
                                then:"A"
                            },
                            {
                                case:{
                                    $and:[{$gte:["$average_score", 14]}, {$lt:["$average_score", 28]}]
                                }, 
                                then:"B" 
                            },
                            {
                                case:{
                                    $gte:["$average_score", 28]
                                }, 
                                then:"C"
                            }
                        ],
                        default: null
                    }
                }
            }
        }
    ]
);


db.restaurants.findOne()




































































