// 1. Listar el nombre (name) y barrio (borough) de todos los restaurantes de cocina
// (cuisine) tipo "Italian" y que entre sus notas (grades) tengan al menos una
// entrada con nota (grade) "A" y puntaje (score) mayor o igual a 10. La lista final
// sólo deberá mostrar 1 entrada por restaurante y deberá estar ordenada de manera
// alfabética por el barrio primero y el nombre después. Hint: Revisar operadores
// $regex y $elemMatch.

db.restaurants.find(
    {
        cuisine: "Italian",
        grades: {
            $elemMatch: {
                grade: 'A',
                score: {
                    $gte: 10
                }
            }
        }
    },
    {
        name:1,
        borough: 1,
        _id: 0
    }
).sort(
    {
    borough:1,
    name: 1
    }
)

// 2. Actualizar las panaderías (cuisine ~ Bakery) y las cafeterías (cuisine ~
// Coffee) agregando un nuevo campo discounts que sea un objeto con dos campos:
// day y amount. Si el local se ubica en Manhattan, el día será "Monday" y el
// descuento será "%10". En caso contrario el día será "Tuesday" y el descuento será
// "5%". Hint: Revisar el operador $cond.

db.restaurants.updateMany(
    {
        "cuisine": { $in: ["Bakery", "Coffee"] }
    },
    [
        {
            $set: {
                discounts: {
                    day: {
                        $cond: {
                            if: { $eq: ["$borough", "Manhattan"] },
                            then: "Monday",
                            else: "Tuesday"
                        }
                    },
                    amount: {
                        $cond: {
                            if: { $eq: ["$borough", "Manhattan"] },
                            then: "%10",
                            else: "%5"
                        }
                    }
                }
            }
        }
    ]
);

// CHECK
// db.restaurants.find(
//     {
//         "cuisine": {
//             $in: ["Bakery", "Coffee"]
//         }
//     },
//     {}
// )

// 3. Contar la cantidad de restaurantes cuyo address.zipcode se encuentre entre
// 10000 y 11000. Tener en cuenta que el valor original es un string y deberá ser
// convertido. También tener en cuenta que hay casos erróneos que no pueden ser
// convertidos a número, en cuyo caso el valor será reemplazado por 0. Hint: Revisar
// el operador $convert.

db.restaurants.find(
    {
        $expr: {
            $and: [
                {
                    $gte: [
                        {
                            $convert: {
                                input: "$address.zipcode",
                                to: "int",
                                onError: 0,
                                onNull: 0
                            }
                        },
                        10000
                    ]
                },
                {
                    $lte: [
                        {
                            $convert: {
                                input: "$address.zipcode",
                                to: "int",
                                onError: 0,
                                onNull: 0
                            }
                        },
                        11000
                    ]
                }
            ]
        }
    }
).count(

);

// 4. Por cada tipo de cocina (cuisine), contar la cantidad de notas distintas recibidas
// (grades.grade) en el segundo semestre de 2013. Ordenar por tipo de cocina y
// nota.

db.restaurants.aggregate([
    {
        $unwind: "$grades"
    },
    {
        $match: {
            "grades.date": {
                $gte:ISODate("2013-06-01T00:00:00.000Z"),
                $lt:ISODate("2014-01-01T00:00:00.000Z")
            }
        }
    },
    {
        $group:{
            _id: {
                cuisine: "$cuisine",
                grade: "$grades.grade"
            },
            grade_count: {
                $count: {}
            }
        }
    },
    {
        $project:{
            cuisine: "$_id.cuisine",
            grade: "$_id.grade",
            grade_count: 1,
            _id:0
        }
    },
    {
        $sort: {
            cuisine: 1,
            grade: 1
        }
    }
]);

// 5. Data la siguiente tabla de conversión de notas (grades.grade):
// _________
// |A  |  5|
// |B  |  4|
// |C  |  3|
// |D  |  2|
// |*  |  1|
// Donde "*" sería el resto de los casos posibles. Transformar las notas de los
// restaurantes de acuerdo a la tabla. Luego, calcular la nota promedio, máxima y
// mínima por tipo de cocina (cuisine). El resultado final deberá mostrar la cocina, la
// nota promedio, la nota máxima y la nota mínima, ordenadas de manera descendente
// por la nota promedio. Hint: Revisar el operador $switch.

db.restaurants.aggregate([
    {
        $unwind: "$grades"
    },
    {
        $project: {
            cuisine: 1,
            grade: {
                $switch: {
                    branches: [
                        {case: {$eq: ["$grades.grade", 'A']}, then: 5},
                        {case: {$eq: ["$grades.grade", 'B']}, then: 4},
                        {case: {$eq: ["$grades.grade", 'C']}, then: 3},
                        {case: {$eq: ["$grades.grade", 'D']}, then: 2}
                    ],
                    default: 1
                }
            }
        }
    },
    {
        $group: {
            _id: "$cuisine",
            average_grade: {
                $avg: "$grade"
            },
            max_grade: {
                $max: "$grade"
            },
            min_grade: {
                $min: "$grade"
            }
        }
    },
    {
        $project: {
            cuisine: "$_id",
            average_grade: 1,
            max_grade: 1,
            min_grade: 1,
            _id: 0
        }
    },
    {
        $sort: {
            average_grade: -1
        }
    }
]);

// 6. Especificar reglas de validación para la colección restaurant utilizando JSON
// Schema. Tener en cuenta los campos: address (con sus campos anidados),
// borough, cuisine, grades (con sus campos anidados), name, restaurant_id, y
// discount (con sus campos anidados). Inferir tipos y otras restricciones que considere
// adecuadas (incluyendo campos requeridos). Agregar una regla de validación para
// que el zipcode, aún siendo un string, verifique que el rango esté dentro de lo
// permitido para New York City (i.e. 10001-11697). Finalmente dejar 2 casos de falla
// ante el esquema de validación y 1 caso de éxito. Hint: Deberán hacer conversión
// con $convert en el caso de la regla de validación. Los casos no deben ser triviales
// (i.e. sólo casos de falla por un error de tipos).

db.runCommand({
    collMod: "restaurants",
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["address", "borough", "cuisine", "grades", "name", "restaurant_id"],
            properties: {
                address: {
                    bsonType: "object",
                    required: ["building", "coord", "street", "zipcode"],
                    properties: {
                        building: {
                            bsonType: "string"
                        },
                        coord: {
                            bsonType: "array",
                            items: {
                                bsonType: "double"
                            }
                        },
                        street: {
                            bsonType: "string"
                        },
                        zipcode: {
                            bsonType: "string"
                        }
                    }
                },
                borough: {
                    bsonType: "string"
                },
                cuisine: {
                    bsonType: "string",
                },
                grades: {
                    bsonType: "array",
                    items: {
                        bsonType: "object",
                        required: ["date", "grade", "score"],
                        properties: {
                            date: {
                                bsonType: "date"
                            },
                            grade: {
                                bsonType: "string",
                                enum: ['A', 'B', 'C', 'D']
                            },
                            score: {
                                bsonType: "int",
                                minimum: 0 // El puntaje no puede ser negativo
                            }
                        }
                    },
                },
                name: {
                    bsonType: "string"
                },
                restaurant_id:{
                    bsonType: "string",
                },
                discount: {
                    bsonType: "object",
                    required: ["day", "amount"],
                    properties: {
                        day: {
                            bsonType: "string"
                        },
                        amount: {
                            bsonType: "string"
                        }
                    }
                }
            },
        },
        $expr: {
            $and: [
              {
                $gte: [
                  { $convert: { input: "$address.zipcode", to: "int", onError: 0, onNull: 0 } },
                  10001
                ]
              },
              {
                $lte: [
                  { $convert: { input: "$address.zipcode", to: "int", onError: 0, onNull: 0 } },
                  11697
                ]
              }
            ]
          }
    },
    validationLevel: "strict",
    validationAction: "error"
});

// CASOS QUE FALLAN:

// "score" no es del tipo int

db.restaurants.insertOne(
    {
        address: {
          building: '469',
          coord: [ -73.961704, 40.662942 ],
          street: 'Flatbush Avenue',
          zipcode: '11000'
        },
        borough: 'Brooklyn',
        cuisine: 'Hamburgers',
        grades: [
          { date: ISODate('2014-12-30T00:00:00.000Z'), grade: 'A', score: "abc" }
        ],
        name: "Wendy'S",
        restaurant_id: '30112340',
        average_score: 13.75,
        grade: 'A'
      }
  );
  
  // "zipcode" > "11697"
  
  db.restaurants.insertOne(
    {
        address: {
          building: '469',
          coord: [ -73.961704, 40.662942 ],
          street: 'Flatbush Avenue',
          zipcode: '11698'
        },
        borough: 'Brooklyn',
        cuisine: 'Hamburgers',
        grades: [
          { date: ISODate('2014-12-30T00:00:00.000Z'), grade: 'A', score: 8 },
          {
            date: ISODate('2014-07-01T00:00:00.000Z'),
            grade: 'B',
            score: 23
          }
        ],
        name: "Wendy'S",
        restaurant_id: '30112340',
        average_score: 13.75,
        grade: 'A'
      }
  );
  
  // CASO QUE PASA:
  
  db.restaurants.insertOne(
    {
        address: {
          building: '469',
          coord: [ -73.961704, 40.662942 ],
          street: 'Flatbush Avenue',
          zipcode: '11000'
        },
        borough: 'Brooklyn',
        cuisine: 'Hamburgers',
        grades: [
          { date: ISODate('2014-12-30T00:00:00.000Z'), grade: 'A', score: 8 },
          {
            date: ISODate('2014-07-01T00:00:00.000Z'),
            grade: 'B',
            score: 23
          },
          {
            date: ISODate('2013-04-30T00:00:00.000Z'),
            grade: 'A',
            score: 12
          },
          {
            date: ISODate('2012-05-08T00:00:00.000Z'),
            grade: 'A',
            score: 12
          }
        ],
        name: "Wendy'S",
        restaurant_id: '30112340',
        average_score: 13.75,
        grade: 'A'
      }
  );

  // 7. 
  