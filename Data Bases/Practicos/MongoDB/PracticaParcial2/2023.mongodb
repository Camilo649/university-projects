// 1. Buscar las ventas realizadas en "London", "Austin" o "San Diego"; a un customer con
// edad mayor-igual a 18 años que tengan productos que hayan salido al menos 1000
// y estén etiquetados (tags) como de tipo "school" o "kids" (pueden tener más
// etiquetas).
// Mostrar el id de la venta con el nombre "sale", la fecha (“saleDate"), el storeLocation,
// y el "email del cliente. No mostrar resultados anidados.

db.sales.find(
    {
        "storeLocation": { 
            $in: ["London", "Austin", "San Diego"] 
        },
        "customer.age": {
            $gte: 18
        },
        items: {
            $elemMatch: {
                price: {
                    $gte: 1000
                },
                tags: { 
                    $in: ["school", "kids"] 
                }
            }
        }
    },
    {
        sale: { $toString: "$_id" }, 
        saleDate: { $dateToString: { format: "%Y-%m-%dT%H:%M:%S.%LZ", date: "$saleDate" } },
        storeLocation: 1,
        email: "$customer.email",
        _id: 0
    }
);

// 2. Buscar las ventas de las tiendas localizadas en Seattle, donde el método de compra
// sea ‘In store’ o ‘Phone’ y se hayan realizado entre 1 de febrero de 2014 y 31 de enero
// de 2015 (ambas fechas inclusive). Listar el email y la satisfacción del cliente, y el
// monto total facturado, donde el monto de cada item se calcula como 'price *
// quantity'. Mostrar el resultado ordenados por satisfacción (descendente), frente a
// empate de satisfacción ordenar por email (alfabético).

db.sales.find(
    {
        storeLocation: "Seattle",
        purchaseMethod: {
            $in: ["In store", "Phone"]
        },
        saleDate: {
            $gte:ISODate("2014-02-01T00:00:00.000Z"),
            $lt:ISODate("2015-02-01T00:00:00.000Z")
        }
    },
    {
        email: "$customer.email",
        satisfaction: "$customer.satisfaction",
        total_amount: {
            $toDouble: {
                $sum: {
                    $map: {
                        input: "$items",
                        as: "item",
                        in: {$multiply: ["$$item.price", "$$item.quantity"]}
                    }
                }
            }
        },
        _id: 0
    }
).sort(
    {
        "customer.satisfaction": -1,
        "customer.email": 1
    }
);

// 3. Crear la vista salesInvoiced que calcula el monto mínimo, monto máximo, monto
// total y monto promedio facturado por año y mes. Mostrar el resultado en orden
// cronológico. No se debe mostrar campos anidados en el resultado.

db.createView(
    "salesInvoiced",
    "sales",
    [
        {
            $unwind: "$items"
        },
        {
            $group: {
              _id: {
                year: {$year: {$toDate: "$saleDate"}}, 
                month: {$month: {$toDate: "$saleDate"}}
              },
              minimun_amount: {
                $min: {
                    $toDouble: {
                        $multiply: ["$items.price", "$items.quantity"]
                    }
                }
              },
              maximun_amount: {
                $max: {
                    $toDouble: {
                        $multiply: ["$items.price", "$items.quantity"]
                    }
                }
              },
              total_amount: {
                $sum: {
                    $toDouble: {
                        $multiply: ["$items.price", "$items.quantity"]
                    }
                }
              },
              average_amount: {
                $avg: {
                    $toDouble: {
                        $multiply: ["$items.price", "$items.quantity"]
                    }
                }
              }
            }
        },
        {
            $project:{
                year: "$_id.year",
                month: "$_id.month",
                minimun_amount: 1,
                maximun_amount: 1,
                total_amount: 1,
                average_amount: 1,
                _id:0
            }
        },
        {
            $sort:{
                year:1,
                month:1
            }
        }
    ]
);

// 4. Mostrar el storeLocation, la venta promedio de ese local, el objetivo a cumplir de
// ventas (dentro de la colección storeObjectives) y la diferencia entre el promedio y el
// objetivo de todos los locales.

db.sales.aggregate([
    {
        $lookup:{
            from: "storeObjectives",
            localField: "storeLocation",
            foreignField: "_id",
            as: "objective"
          }
    },
    {
        $unwind: "$objective"
    },
    {
        $project: {
          storeLocation: 1,
          average_sales: {
            $toDouble: {
                $avg: {
                    $map: {
                        input: "$items",
                        as: "item",
                        in: {$multiply: ["$$item.price", "$$item.quantity"]}
                    }
                }
            }
          },
          objective: "$objective.objective",
          difference: {
            $abs: {
                $subtract: [
                    {
                        $toDouble: {
                            $avg: {
                                $map: {
                                    input: "$items",
                                    as: "item",
                                    in: {$multiply: ["$$item.price", "$$item.quantity"]}
                                }
                            }
                        }
                    },
                    { 
                        $toDouble: "$objective.objective" 
                    }
                ]
            }
          }
        }
    }
])

// 5. Especificar reglas de validación en la colección sales utilizando JSON Schema.

// a. Las reglas se deben aplicar sobre los campos: saleDate, storeLocation,
// purchaseMethod, y customer ( y todos sus campos anidados ). Inferir los tipos y
// otras restricciones que considere adecuados para especificar las
// reglas a partir de los documentos de la colección.

db.runCommand({
    collMod: "sales",
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["saleDate", "storeLocation", "customer", "purchaseMethod"],
            properties: {
                saleDate: {
                    bsonType: "date",
                },
                storeLocation: {
                    bsonType: "string",
                },
                purchaseMethod: {
                    bsonType: "string",
                    enum: ["Online", "In Store", "Phone"]
                },
                customer: {
                    bsonType: "object",
                    required: ["gender", "age", "email", "satisfaction"], 
                    properties: {
                        gender: {
                            bsonType: "string",
                            enum: ['M', 'F']
                        },
                        age: {
                            bsonType: "int",
                            minimum: 18,
                            maximum: 100 // Solo consideraremos compras de mayores de 18 años
                        },
                        email: {
                            bsonType: "string",
                            pattern: "^(.*)@(.*)\\.(.{2,4})$",
                        },
                        satisfaction: {
                            bsonType: "int",
                            minimum: 1,
                            maximum: 5 // La satisfacción solo puede tomar valores entre 1 y 5 (inclusive)
                        }
                    }
                }
            }
        }
    },
    validationLevel: "strict",
    validationAction: "error"
});

// b. Para testear las reglas de validación crear un caso de falla en la regla de
// validación y un caso de éxito (Indicar si es caso de falla o éxito)

// CASO QUE FALLA:

// satisfaction no está en el rango permitido

db.sales.insertOne(
    {
        saleDate: "ISODate('2024-11-21T21:22:52.606Z')",
        items: [
          {
            name: 'printer paper',
            tags: [ 'office', 'stationary' ],
            price: Decimal128('40.01'),
            quantity: 2
          }
        ],
        storeLocation: "Denver",
        customer: { gender: 'M', age: 42, email: 'cauho@witwuta.sv', satisfaction: 6 },
        couponUsed: false,
        purchaseMethod: 'Online'
      }
      
);

// CASO QUE PASA:

db.sales.insertOne(
    {
        saleDate: ISODate('2024-11-21T21:22:57.606Z'),
        items: [
          {
            name: 'printer paper',
            tags: [ 'office', 'stationary' ],
            price: Decimal128('40.01'),
            quantity: 2
          }
        ],
        storeLocation: "Denver",
        customer: { gender: 'M', age: 42, email: 'cauho@witwuta.sv', satisfaction: 4 },
        couponUsed: false,
        purchaseMethod: "Phone"
    }  
);
