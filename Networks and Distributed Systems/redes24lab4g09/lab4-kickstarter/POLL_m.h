//
// Generated file, do not edit! Created by opp_msgtool 6.0 from POLL.msg.
//

#ifndef __POLL_M_H
#define __POLL_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

struct Info;
class POLL;
/**
 * Struct generated from POLL.msg:1 by opp_msgtool.
 */
struct Info {
    unsigned int id;
    unsigned int hops;
    double receptionTime;


    Info() : id(0), hops(0), receptionTime(0.0) {}

    Info(unsigned int id, unsigned int hops, double receptionTime)
        : id(id), hops(hops), receptionTime(receptionTime) {}
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const Info& a);
void __doUnpacking(omnetpp::cCommBuffer *b, Info& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Info& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Info& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>POLL.msg:7</tt> by opp_msgtool.
 * <pre>
 * class POLL extends cPacket
 * {
 *     unsigned int source;
 *     unsigned int hopCount;
 *     Info information[];
 *     bool side;
 * }
 * </pre>
 */
class POLL : public ::omnetpp::cPacket
{
  protected:
    unsigned int source = 0;
    unsigned int hopCount = 0;
    Info *information = nullptr;
    size_t information_arraysize = 0;
    bool side = false;

  private:
    void copy(const POLL& other);

  protected:
    bool operator==(const POLL&) = delete;

  public:
    POLL(const char *name=nullptr);
    POLL(const POLL& other);
    virtual ~POLL();
    POLL& operator=(const POLL& other);
    virtual POLL *dup() const override {return new POLL(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getSource() const;
    virtual void setSource(unsigned int source);

    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);

    virtual void setInformationArraySize(size_t size);
    virtual size_t getInformationArraySize() const;
    virtual const Info& getInformation(size_t k) const;
    virtual Info& getInformationForUpdate(size_t k) { return const_cast<Info&>(const_cast<POLL*>(this)->getInformation(k));}
    virtual void setInformation(size_t k, const Info& information);
    virtual void insertInformation(size_t k, const Info& information);
    [[deprecated]] void insertInformation(const Info& information) {appendInformation(information);}
    virtual void appendInformation(const Info& information);
    virtual void eraseInformation(size_t k);

    virtual bool getSide() const;
    virtual void setSide(bool side);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const POLL& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, POLL& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const Info *p) {return any_ptr(p);}
template<> inline Info *fromAnyPtr(any_ptr ptr) { return ptr.get<Info>(); }
template<> inline POLL *fromAnyPtr(any_ptr ptr) { return check_and_cast<POLL*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __POLL_M_H

